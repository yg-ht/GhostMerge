[
  {
    "id": 269,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy Variant 8",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the company and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": " critical",
    "extra_fields": null
  },
  {
    "id": 270,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 271,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy Variant 2",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the agency and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": " review",
    "extra_fields": null
  },
  {
    "id": 272,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 273,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy Variant 6",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the agency and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": " critical",
    "extra_fields": null
  },
  {
    "id": 274,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 275,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy Variant 2",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the company and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": " critical",
    "extra_fields": null
  },
  {
    "id": 276,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 277,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy Variant 2",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the institution and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": " review",
    "extra_fields": null
  },
  {
    "id": 278,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 301,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Deprecated TLS version enabled",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "Applies to legacy server config.",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 310,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "SQL injection vulnerability",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "Impact not yet confirmed.",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 320,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Exposed admin panel",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "No 2FA protection on admin interface.",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "internal audit",
    "extra_fields": null
  },
  {
    "id": 330,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Passwords generated using short wordlist resulting in low entropy",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 350,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Repeated entry in B",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 350,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "Repeated entry in B",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 360,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "AWS",
    "title": "AWS environment exposure of credentials",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  },
  {
    "id": 370,
    "severity": "High",
    "cvss_score": "",
    "cvss_vector": "",
    "finding_type": "Mobile",
    "title": "Open redirect flaw",
    "description": "<p>Using complex passwords (those with high entropy) helps to resist brute forcing attacks, and is especially important in systems where there is no Multi-Factor Authentication (MFA) available and where password expiration is not frequent.</p>\r\n<p>The <span class=\"highlight\" style=\"background-color: yellow;\">wordlist found was 177 short words, which is then used to generate passwords by combining a random selection of three of the words.</span></p>\r\n<p>The word list in use for generating passwords is considered short. This results in relatively easy to brute force passwords being generated for users.</p>",
    "impact": "<p>The likelihood of this being exploited is high, <span class=\"highlight\" style=\"background-color: yellow;\">as the list is contained in a public GitHub repository.</span> Even if that were not the case the self registration process could be exploited to generate a large number of passwords automatically, exposing the word list.\u00a0 Furthermore, the level of entropy is low enough even without the word list being exposed that brute forcing it would still be relatively trivial.</p>\r\n<p>The impact of this vulnerability is difficult to quantify.\u00a0 <span class=\"highlight\" style=\"background-color: yellow;\">For general users, it is considered low.\u00a0 However, this service is available throughout the organisation and therefore has high-profile users as well.\u00a0 The nature of some of these users makes the impact of a successful attack high.</span></p>",
    "mitigation": "<p>Use a substantially larger wordlist for generating user passwords.\u00a0 This word list must be at least 10,000 words.</p>\r\n<p>Add additional entropy to the password generation process, for example, consider using four words instead of three. Instead, consider using some numbers and symbols, though this must be completed with accessibility and usability in mind.</p>\r\n<p>Ensure that passwords expire.\u00a0 Choose an expiry period that suits the system and user context.\u00a0 For example, it is recommended that every 30 days is too short, but anything more than 1 year is likely too long.</p>",
    "replication_steps": "",
    "host_detection_techniques": "",
    "network_detection_techniques": "",
    "references": "",
    "finding_guidance": "",
    "tags": "",
    "extra_fields": null
  }
]